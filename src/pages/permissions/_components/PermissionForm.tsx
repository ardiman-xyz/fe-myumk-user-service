import React, { useState, useCallback, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Key,
  Code,
  Type,
  Loader2,
  Save,
  Rocket,
  Tag,
  Activity,
  CheckCircle,
  Info,
} from "lucide-react";

import {
  PermissionFormValidator,
  type CreatePermissionFormData,
  COMMON_ACTIONS,
  COMMON_RESOURCES,
} from "@/types/permission";

interface PermissionFormProps {
  onSubmit: (data: CreatePermissionFormData) => Promise<void>;
  isLoading?: boolean;
  initialData?: Partial<CreatePermissionFormData>;
  mode?: "create" | "edit";
}

interface FormErrors {
  [key: string]: string;
}

const PermissionForm: React.FC<PermissionFormProps> = ({
  onSubmit,
  isLoading = false,
  initialData = {},
  mode = "create",
}) => {
  const [formData, setFormData] = useState<CreatePermissionFormData>({
    name: "",
    code: "",
    description: "",
    resource: "",
    action: "",
    ...initialData,
  });

  const [errors, setErrors] = useState<FormErrors>({});
  const [touchedFields, setTouchedFields] = useState<Set<string>>(new Set());
  const [autoGenerated, setAutoGenerated] = useState({
    code: false,
    name: false,
  });

  const validateField = useCallback(
    (fieldName: keyof CreatePermissionFormData, value: any) => {
      const error = PermissionFormValidator.validateField(
        fieldName,
        value,
        formData,
        mode
      );

      setErrors((prev) => {
        const newErrors = { ...prev };
        if (error) {
          newErrors[fieldName] = error;
        } else {
          delete newErrors[fieldName];
        }
        return newErrors;
      });
    },
    [formData, mode]
  );

  // Auto-generate code and name based on resource and action
  useEffect(() => {
    if (formData.resource && formData.action && mode === "create") {
      if (!autoGenerated.code) {
        const generatedCode =
          PermissionFormValidator.generateCodeFromResourceAndAction(
            formData.resource,
            formData.action
          );
        if (generatedCode !== formData.code) {
          setFormData((prev) => ({ ...prev, code: generatedCode }));
        }
      }

      if (!autoGenerated.name) {
        const generatedName =
          PermissionFormValidator.generateNameFromResourceAndAction(
            formData.resource,
            formData.action
          );
        if (generatedName !== formData.name) {
          setFormData((prev) => ({ ...prev, name: generatedName }));
        }
      }
    }
  }, [formData.resource, formData.action, autoGenerated, mode]);

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    const fieldName = name as keyof CreatePermissionFormData;

    setFormData((prev) => ({
      ...prev,
      [fieldName]: value,
    }));

    // Mark as manually edited if user changes auto-generated fields
    if (fieldName === "code" || fieldName === "name") {
      setAutoGenerated((prev) => ({
        ...prev,
        [fieldName]: true,
      }));
    }

    // Mark field as touched and validate
    if (touchedFields.has(fieldName)) {
      validateField(fieldName, value);
    }
  };

  const handleSelectChange = (
    fieldName: keyof CreatePermissionFormData,
    value: string
  ) => {
    setFormData((prev) => ({
      ...prev,
      [fieldName]: value,
    }));

    if (touchedFields.has(fieldName)) {
      validateField(fieldName, value);
    }
  };

  const handleBlur = (
    e: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const fieldName = e.target.name as keyof CreatePermissionFormData;
    setTouchedFields((prev) => new Set(prev).add(fieldName));
    validateField(fieldName, formData[fieldName]);
  };

  const handleSubmit = async () => {
    // Mark all fields as touched
    const allFields = Object.keys(formData) as Array<
      keyof CreatePermissionFormData
    >;
    setTouchedFields(new Set(allFields));

    // Validate entire form
    const formErrors = PermissionFormValidator.validateForm(formData);
    setErrors(formErrors);

    // If no errors, submit
    if (Object.keys(formErrors).length === 0) {
      await onSubmit(formData);
    }
  };

  const getFieldError = (fieldName: string): string | undefined => {
    return touchedFields.has(fieldName) ? errors[fieldName] : undefined;
  };

  const isFieldInvalid = (fieldName: string): boolean => {
    return touchedFields.has(fieldName) && !!errors[fieldName];
  };

  return (
    <div className="space-y-6">
      {/* Basic Information */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Key className="h-5 w-5 text-orange-600" />
            Permission Details
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* Resource and Action (Primary Fields) */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {/* Resource */}
            <div className="space-y-2">
              <Label htmlFor="resource" className="flex items-center gap-1">
                <Tag className="h-3 w-3" />
                Resource *
              </Label>
              <div className="space-y-2">
                <Input
                  id="resource"
                  name="resource"
                  type="text"
                  placeholder="e.g., users, posts, settings"
                  value={formData.resource}
                  onChange={handleInputChange}
                  onBlur={handleBlur}
                  className={isFieldInvalid("resource") ? "border-red-500" : ""}
                  disabled={isLoading}
                  aria-invalid={isFieldInvalid("resource")}
                />
                {/* Quick Select for Common Resources */}
                <div className="flex flex-wrap gap-1">
                  {COMMON_RESOURCES.slice(0, 4).map((resource) => (
                    <Button
                      key={resource.value}
                      type="button"
                      variant="outline"
                      size="sm"
                      className="text-xs h-6"
                      onClick={() =>
                        handleSelectChange("resource", resource.value)
                      }
                      disabled={isLoading}
                    >
                      {resource.label}
                    </Button>
                  ))}
                </div>
              </div>
              {getFieldError("resource") && (
                <p className="text-sm text-red-600">
                  {getFieldError("resource")}
                </p>
              )}
              <p className="text-xs text-gray-500">
                What this permission controls (e.g., users, posts, settings)
              </p>
            </div>

            {/* Action */}
            <div className="space-y-2">
              <Label htmlFor="action" className="flex items-center gap-1">
                <Activity className="h-3 w-3" />
                Action *
              </Label>
              <div className="space-y-2">
                <Input
                  id="action"
                  name="action"
                  type="text"
                  placeholder="e.g., view, create, edit, delete"
                  value={formData.action}
                  onChange={handleInputChange}
                  onBlur={handleBlur}
                  className={isFieldInvalid("action") ? "border-red-500" : ""}
                  disabled={isLoading}
                  aria-invalid={isFieldInvalid("action")}
                />
                {/* Quick Select for Common Actions */}
                <div className="flex flex-wrap gap-1">
                  {COMMON_ACTIONS.slice(0, 4).map((action) => (
                    <Button
                      key={action.value}
                      type="button"
                      variant="outline"
                      size="sm"
                      className="text-xs h-6"
                      onClick={() => handleSelectChange("action", action.value)}
                      disabled={isLoading}
                    >
                      {action.label}
                    </Button>
                  ))}
                </div>
              </div>
              {getFieldError("action") && (
                <p className="text-sm text-red-600">
                  {getFieldError("action")}
                </p>
              )}
              <p className="text-xs text-gray-500">
                What can be done (e.g., view, create, edit, delete)
              </p>
            </div>
          </div>

          {/* Auto-generated Preview */}
          {formData.resource && formData.action && (
            <div className="p-3 bg-blue-50 border border-blue-200 rounded-lg">
              <div className="flex items-center gap-2 mb-2">
                <Info className="h-4 w-4 text-blue-600" />
                <span className="text-sm font-medium text-blue-800">
                  Auto-generated Preview
                </span>
              </div>
              <div className="text-sm text-blue-700">
                <div>
                  <strong>Code:</strong>{" "}
                  {PermissionFormValidator.generateCodeFromResourceAndAction(
                    formData.resource,
                    formData.action
                  )}
                </div>
                <div>
                  <strong>Name:</strong>{" "}
                  {PermissionFormValidator.generateNameFromResourceAndAction(
                    formData.resource,
                    formData.action
                  )}
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Permission Identity */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Type className="h-5 w-5 text-blue-600" />
            Permission Identity
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* Permission Name */}
          <div className="space-y-2">
            <Label htmlFor="name" className="flex items-center gap-1">
              <Type className="h-3 w-3" />
              Permission Name *
            </Label>
            <Input
              id="name"
              name="name"
              type="text"
              placeholder="Enter permission name (e.g., View Users)"
              value={formData.name}
              onChange={handleInputChange}
              onBlur={handleBlur}
              className={isFieldInvalid("name") ? "border-red-500" : ""}
              disabled={isLoading}
              aria-invalid={isFieldInvalid("name")}
            />
            {getFieldError("name") && (
              <p className="text-sm text-red-600">{getFieldError("name")}</p>
            )}
            <p className="text-xs text-gray-500">
              Human-readable name for this permission
            </p>
          </div>

          {/* Permission Code */}
          <div className="space-y-2">
            <Label htmlFor="code" className="flex items-center gap-1">
              <Code className="h-3 w-3" />
              Permission Code *
            </Label>
            <Input
              id="code"
              name="code"
              type="text"
              placeholder="Enter permission code (e.g., users.view)"
              value={formData.code}
              onChange={handleInputChange}
              onBlur={handleBlur}
              className={isFieldInvalid("code") ? "border-red-500" : ""}
              disabled={isLoading || mode === "edit"}
              aria-invalid={isFieldInvalid("code")}
            />
            {getFieldError("code") && (
              <p className="text-sm text-red-600">{getFieldError("code")}</p>
            )}
            <p className="text-xs text-gray-500">
              {mode === "edit"
                ? "Permission code cannot be changed after creation"
                : "Unique identifier using resource.action format (lowercase only)"}
            </p>
          </div>

          {/* Description */}
          <div className="space-y-2">
            <Label htmlFor="description">Description</Label>
            <Textarea
              id="description"
              name="description"
              placeholder="Describe what this permission allows users to do..."
              value={formData.description}
              onChange={handleInputChange}
              onBlur={handleBlur}
              className={isFieldInvalid("description") ? "border-red-500" : ""}
              disabled={isLoading}
              rows={3}
            />
            {getFieldError("description") && (
              <p className="text-sm text-red-600">
                {getFieldError("description")}
              </p>
            )}
            <p className="text-xs text-gray-500">
              Optional description to help others understand this permission's
              purpose
            </p>
          </div>
        </CardContent>
      </Card>

      {/* Submit Button */}
      <div className="flex justify-end pt-6 border-t">
        <Button
          onClick={handleSubmit}
          disabled={isLoading || Object.keys(errors).length > 0}
          className="min-w-[140px]"
        >
          {isLoading ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              {mode === "create" ? "Creating..." : "Updating..."}
            </>
          ) : (
            <>
              <Rocket className="mr-2 h-4 w-4" />
              {mode === "create" ? "Create Permission" : "Update Permission"}
            </>
          )}
        </Button>
      </div>
    </div>
  );
};

export default PermissionForm;
